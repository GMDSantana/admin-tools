#!/bin/bash

# A script to set up a new wks server. It takes one mandatory argument, the
# DOMAIN for which wks will be configured. It takes an optional second
# argument, which is the email address of the system administrator (defaults
# to "webmaster@$DOMAIN")

# You MUST already have an MTA configured and able to deliver to local users.

set -euo pipefail

die() {
    echo $2 >&2
    exit $1
}

[[ ${1-} ]] || die 1 "You must provide a domain name"

DOMAIN="${1-}"
LETSENCRYPT_EMAIL="${2-webmaster@$DOMAIN}"

SERVER_NAME="openpgpkey.$DOMAIN"
WKSUSER=key-submission
SUBMISSION_ADDRESS="$WKSUSER@$DOMAIN"
WKSHOME=/var/lib/gnupg/wks
WEBROOT="$WKSHOME/html"
DEFAULT_GPG_OPTIONS="--pinentry-mode loopback --keyid-format 0xlong --with-fingerprint --status-fd 2"

apt install -y gpg-wks-server apache2 certbot procmail ufw

ufw allow to any app "Apache Full"

APACHEUSER=$(ps aux | grep /usr/sbin/apache2 | grep -v ^root | awk '{print $1}' | sort -u)
APACHEGROUP=$(eval echo $(groups $APACHEUSER|awk -F: '{print $2}'))

# Before we do anything, make sure we have enough entropy
# https://lists.gnupg.org/pipermail/gnupg-users/2020-March/063372.html
mkdir -p /etc/gcrypt
cat <<EOF >/etc/gcrypt/random.conf
# Options for the random generator

# We don't trust the the Jitter based thing -  do not use it.
#disable-jent

only-urandom
EOF


#################################
###### Set up service user ######
#################################


# create user
mkdir -p $(dirname "$WKSHOME")
adduser --disabled-password --home "$WKSHOME" --gecos "GNUPG WKS Server" "$WKSUSER"
mkdir -p "$WKSHOME/$DOMAIN" "$WKSHOME/Mail" "$WEBROOT"
chmod 2750 "$WKSHOME"

# configure mail delivery
cat <<'EOF' >"$WKSHOME/.forward"
"|exec /usr/bin/procmail || exit 75"
EOF

cat <<EOF >"$WKSHOME/.procmailrc"
MAILDIR=\$HOME/Mail
LOGFILE=\$HOME/Mail/from
LOCKFILE=\$HOME/Mail/.lockmail
VERBOSE=yes
# filter out FROM_DAEMON mails (bounces, ...) into separate mailbox
:0
* ^FROM_DAEMON
/dev/null
# archive (copy!) all "normal" mails
:0 c
archive/
# if not in a loop: handle mails with gpg-wks-server
:0 w
* !^From: $SUBMISSION_ADDRESS
* !^X-WKS-Loop: $DOMAIN
|gpg-wks-server -v --receive \
    --header X-WKS-Loop=$DOMAIN \
    --from $SUBMISSION_ADDRESS --send
# if handling failed: store in separate mailbox
:0 e
cruft/
EOF

chown -R "$WKSUSER:$APACHEGROUP" "$WKSHOME"

# configure submission address
echo "$SUBMISSION_ADDRESS" > "$WKSHOME/$DOMAIN/submission-address"
# initialise the WKS directory structure
sudo -Hu "$WKSUSER" gpg-wks-server --list-domains
# create and publish pgp key for submission address
sudo -Hu "$WKSUSER" gpg $DEFAULT_GPG_OPTIONS --batch --passphrase '' --quick-gen-key "$SUBMISSION_ADDRESS"
HASH=$( \
    sudo -Hu $WKSUSER gpg $DEFAULT_GPG_OPTIONS --with-wkd-hash -K "$SUBMISSION_ADDRESS" \
    | awk -F@ "/^ +[a-zA-Z0-9]+@$DOMAIN/ {print \$1}" \
    )
sudo -Hu "$WKSUSER" gpg $DEFAULT_GPG_OPTIONS -o "/var/lib/gnupg/wks/$DOMAIN/hu/$HASH" \
    --export-options export-minimal --export "$SUBMISSION_ADDRESS"

# daily grooming cron job
cat <<EOF >/etc/cron.d/gpg-wks-server
42 3 * * * $WKSUSER gpg-wks-server --cron
EOF


###############################
###### Set up web server ######
###############################


cat > "/etc/apache2/sites-available/$SERVER_NAME.conf" <<EOF
<VirtualHost *:80>
    ServerName $SERVER_NAME
    DocumentRoot $WEBROOT
    DirectoryIndex index.html index.htm

    CustomLog /var/log/apache2/$SERVER_NAME.access.log combined
    ErrorLog /var/log/apache2/$SERVER_NAME.error.log

    <Directory $WEBROOT>
      Options -Indexes
      AllowOverride None
      Require all granted
    </Directory>

    # redirect everything else to SSL
    RedirectMatch 301 ^(?!/\.well-known/acme-challenge/).* https://$SERVER_NAME\$0
</VirtualHost>

EOF

a2ensite "$SERVER_NAME"
if ! apache2ctl configtest >/dev/null; then
    exit 2
fi

# Remove the 000-default vhost if it exists and our server name is the fqdn.
# Otherwise apache will have undefined behaviour.
if [[ -L /etc/apache2/sites-enabled/000-default.conf && $(hostname --fqdn) == "$SERVER_NAME" ]]; then
        a2dissite 000-default
fi
apache2ctl graceful

# Get a letsencrypt certificate

# Register with letsencrypt if we don't already have an account locally
if ! ls /etc/letsencrypt/accounts/*.api.letsencrypt.org/directory/*/meta.json 2>/dev/null; then
    yes a | certbot register --email "$LETSENCRYPT_EMAIL" --no-eff-email || true
fi
certbot certonly -d "$SERVER_NAME" -n --keep --webroot --webroot-path "$WEBROOT" || exit 3

if [[ ! -x /etc/letsencrypt/renewal-hooks/deploy/50-webservers ]]; then
    cat <<EOF > /etc/letsencrypt/renewal-hooks/deploy/50-webservers
#!/bin/bash

set -e

if [[ \$RENEWED_DOMAINS ]]; then
    for service in apache2 nginx; do
        if systemctl status \$service | grep -q '(running)'; then
            service \$service reload >/dev/null
        fi
    done
fi
EOF
    chmod +x /etc/letsencrypt/renewal-hooks/deploy/50-webservers
fi

cat >> "/etc/apache2/sites-available/$SERVER_NAME.conf" <<EOF
<VirtualHost *:443>
    ServerName $SERVER_NAME
    DocumentRoot $WEBROOT
    DirectoryIndex index.html index.htm

    CustomLog /var/log/apache2/$SERVER_NAME-ssl-request.log "%t %h %{SSL_PROTOCOL}x %{SSL_CIPHER}x \"%r\" %b"
    CustomLog /var/log/apache2/$SERVER_NAME-ssl.access.log combined
    ErrorLog /var/log/apache2/$SERVER_NAME-ssl.error.log

    SSLEngine on
    SSLStrictSNIVHostCheck off
    SSLCertificateFile /etc/letsencrypt/live/$SERVER_NAME/fullchain.pem
    SSLCertificateKeyFile /etc/letsencrypt/live/$SERVER_NAME/privkey.pem
    SSLCACertificateFile /etc/letsencrypt/live/$SERVER_NAME/chain.pem

    Alias "/.well-known/wks" "$WKSHOME/$DOMAIN"
</VirtualHost>
EOF

a2enmod ssl
apache2ctl graceful

cat <<EOF >"$WEBROOT/index.html"
<html>
<head>
<title>openpgpkey.$DOMAIN</title>
</head>
<body>
<p>This is the WKS PGP keyserver for $DOMAIN.</p>

<p>To submit your key, create a publication request using one of the MUAs that
support <a href="https://wiki.gnupg.org/WKS">WKS</a> (e.g. KMail)
or use gpg-wks-client.</p>
</body>
</html>
EOF
