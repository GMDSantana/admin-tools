#!/bin/bash
#
# A QAD script that attempts to intelligently allow access over a (fresh)
# zerotier network and disables general (but not host-specific) ssh access
# from the internet. Note that it assumes ufw.

# NETWORKS is a *newline-separated* list of 6PLANE networks that are 
# considered secure.

# WHITELIST is a *newline-separated* list of hosts (ipv4 or ipv6) that
# are considered secure.

NETWORKS="fcab:abab:ab00::/40 zerotier mgmt
fcfc:fcfc:fc00::/40 zerotier general"

WHITELIST=""

if [[ -f /etc/ztlockdown ]]; then
	. /etc/ztlockdown
fi
if [[ -f ~/.ztlockdown ]]; then
	. ~/.ztlockdown
fi

SECURE_NETWORKS=""

IFS_SAVE="$IFS"
IFS="
"
for network in $NETWORKS; do
	network_prefix=${network%% *}
	if /sbin/route -6 | awk '{print $1}' | sort -u | grep -q "${network_prefix}"; then
		SECURE_NETWORKS="${SECURE_NETWORKS} ${network}"
	fi
done

if [ ! $SECURE_NETWORKS ]; then
	echo "Host is not a member of any secure 6PLANE networks!"
	exit 1
fi

if [ ! -x /usr/sbin/ufw ]; then
	apt-get update && apt-get install ufw || exit 2
fi

remote_host=${SSH_CONNECTION%% *}
if [ ! ${remote_host} ]; then
	echo "Cannot whitelist current SSH connection. It is unsafe to continue."
	exit 3
fi

# Add the current remote host to the whitelist
WHITELIST="${remote_host}
${WHITELIST}"

# Now whitelist our friendly hosts BEFORE enabling ufw. Note that ufw
# maintains a latent configuration while disabled, but will not print
# it until after it has been enabled. This is evil and we must beware.

for host in $WHITELIST; do
	ufw allow to any port 22 from "${host%% *} comment ${host#* }" || exit 3
done
ufw enable

for network in $SECURE_NETWORKS; do

	SECURE_NETWORK=${network%% *}
	SECURE_NETWORK_NAME=${network#* }

	for i in $(ufw status | grep 'ALLOW\s*Anywhere' | grep -v '(v6)'); do
		UFW_TO=${i%ALLOW*}
		j=${i#*ALLOW}
		UFW_FROM=${j%\#*}
		UFW_COMMENT=${j#*\#}
		case "$UFW_TO" in
		22 )
			echo -n
			;;
		* on * )
			ufw allow from "$SECURE_NETWORK" comment "($SECURE_NET_NAME) ${UFW_COMMENT}"
			;;
		* ) 
			ufw allow from "$SECURE_NETWORK" to "$UFW_TO" comment "($SECURE_NET_NAME) ${UFW_COMMENT}"
			;;
		esac
	done

	# add ssh access anyway
	ufw allow from "$SECURE_NETWORK" to any app "OpenSSH" comment "($SECURE_NET_NAME)"
	if [ -d /etc/sshguard ]; then
		echo "$SECURE_NETWORK" >> /etc/sshguard/whitelist
	fi

done

# And try to delete all instances of generic ssh access
ufw delete allow OpenSSH
ufw delete allow 22
ufw delete allow 22/tcp

echo "Current firewall status - check for sanity"

iptables -L -v
iptables -L -v -t nat
ufw status
