#!/bin/bash
#
# A QAD script that disables general (but not host-specific) ssh access
# from the internet, whitelists a set of hosts (including the current
# ssh client IP) for ssh access, and attempts to replicate any existing
# public internet firewall holes on a set of secure networks.

# This assumes ufw.

# NETWORKS is a *newline-separated* list of network prefixes that are 
# considered secure and which should have general access.

# WHITELIST is a *newline-separated* list of hosts that are considered
# secure and should have ssh access.

if [[ $(whoami) != "root" ]]; then
	# If we are not root, we need to use sudo. Non-root is supported
	# because ansible's "-b" deletes envars such as SSH_CONNECTION
	SUDO=sudo
fi

NETWORKS=""
WHITELIST=""

if [[ -f /etc/ztlockdown ]]; then
	. /etc/ztlockdown
fi
if [[ -f ~/.ztlockdown ]]; then
	. ~/.ztlockdown
fi

IFS_SAVE="$IFS"
IFS="
"

if [ ! -x /usr/sbin/ufw ]; then
	if [ -z "$(find /var/cache/apt/pkgcache.bin -mmin -60)" ]; then
		${SUDO} apt-get update
	fi
	${SUDO} apt-get install ufw || exit 2
fi

remote_host=${SSH_CONNECTION%% *}
if [ ! ${remote_host} ]; then
	echo "Cannot whitelist current SSH connection. It is unsafe to continue."
	exit 3
fi

# Add the current remote host to the whitelist
WHITELIST="${remote_host} Autodetected ssh connection
${WHITELIST}"

# Now whitelist our friendly hosts BEFORE enabling ufw. Note that ufw
# maintains a latent configuration while disabled, but will not print
# it until after it has been enabled. This is evil and we must beware.

for host in $WHITELIST; do
	echo "Whitelisting ${host%% *} (${host#* })"
	${SUDO} ufw allow to any app "OpenSSH" from "${host%% *}" comment "${host#* }" || exit 3
done

# This is dangerous
yes|${SUDO} ufw enable

for network in $NETWORKS; do

	network_prefix=${network%% *}
	network_name=${network#* }
	
	echo "Adding ${network_prefix} (${network_name})"

	for i in $(ufw status | grep 'ALLOW\s*Anywhere' | grep -v '(v6)'); do
		UFW_TO=${i%ALLOW*}
		j=${i#*ALLOW}
		UFW_FROM=${j%\#*}
		UFW_COMMENT=${j#*\#}
		case "$UFW_TO" in
		22 )
			echo -n
			;;
		*\ on\ * )
			${SUDO} ufw allow from "$network_prefix" comment "($network_name) ${UFW_COMMENT}"
			;;
		* ) 
			${SUDO} ufw allow from "$network_prefix" to "$UFW_TO" comment "($network_name) ${UFW_COMMENT}"
			;;
		esac
	done

	# add ssh access anyway
	${SUDO} ufw allow from "$network_prefix" to any app "OpenSSH" comment "($network_name)"
	if [ -d /etc/sshguard ]; then
		echo "$network_prefix" | ${SUDO} tee -a /etc/sshguard/whitelist
	fi

done

# And try to delete all instances of generic ssh access
${SUDO} ufw delete allow OpenSSH
${SUDO} ufw delete allow 22
${SUDO} ufw delete allow 22/tcp

echo "Current firewall status - check for sanity"

# use -n to prevent delays
${SUDO} iptables -L -v -n
${SUDO} iptables -L -v -n -t nat
${SUDO} ufw status
